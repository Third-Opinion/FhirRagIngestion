name: CI - Build and Test Lambda Functions

on:
  push:
    branches: [ main, develop, 'feature/**', 'hotfix/**' ]
  pull_request:
    branches: [ main, develop ]

env:
  DOTNET_VERSION_9: '9.0.x'
  DOTNET_VERSION_8: '8.0.x'
  SOLUTION_PATH: 'FhirRagIngestion.sln'

jobs:
  build-and-test:
    name: Build and Test Lambda Functions
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET 9
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION_9 }}

    - name: Setup .NET 8 (Lambda Runtime)
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION_8 }}

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-lambda-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-lambda-
          ${{ runner.os }}-nuget-

    - name: Add GitHub NuGet source
      run: |
        dotnet nuget add source https://nuget.pkg.github.com/Third-Opinion/index.json \
          --name github \
          --username ${{ github.actor }} \
          --password ${{ secrets.GITHUB_TOKEN }} \
          --store-password-in-clear-text

    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}

    - name: Build solution
      run: dotnet build ${{ env.SOLUTION_PATH }} --configuration Release --no-restore

    - name: Run tests
      run: dotnet test ${{ env.SOLUTION_PATH }} --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage

    - name: Package Lambda functions
      run: |
        echo "üì¶ Packaging Lambda functions..."
        
        # Package BulkExport Lambda
        cd FhirRag.Ingestion.BulkExport/src/FhirRag.Ingestion.BulkExport
        dotnet lambda package --configuration Release --output-package ../../../artifacts/BulkExport.zip
        cd ../../..
        
        # Package EnrichmentAgent Lambda  
        cd FhirRag.Ingestion.EnrichmentAgent/src/FhirRag.Ingestion.EnrichmentAgent
        dotnet lambda package --configuration Release --output-package ../../../artifacts/EnrichmentAgent.zip
        cd ../../..
        
        # Package Storage Lambda
        cd FhirRag.Ingestion.Storage/src/FhirRag.Ingestion.Storage
        dotnet lambda package --configuration Release --output-package ../../../artifacts/Storage.zip
        cd ../../..

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: ./coverage/**/*.xml

    - name: Upload Lambda packages
      uses: actions/upload-artifact@v4
      with:
        name: lambda-packages
        path: ./artifacts/*.zip

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          **/bin/Release/**
          !**/bin/Release/**/*.pdb

  lambda-validation:
    name: Validate Lambda Packages
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Download Lambda packages
      uses: actions/download-artifact@v4
      with:
        name: lambda-packages
        path: ./artifacts

    - name: Validate Lambda packages
      run: |
        echo "üîç Validating Lambda packages..."
        
        for package in ./artifacts/*.zip; do
          echo "Validating $(basename $package)"
          
          # Check package size (Lambda has size limits)
          size=$(stat -f%z "$package" 2>/dev/null || stat -c%s "$package")
          size_mb=$((size / 1024 / 1024))
          
          echo "  üìè Package size: ${size_mb}MB"
          
          if [ $size_mb -gt 250 ]; then
            echo "  ‚ö†Ô∏è  Warning: Package size (${size_mb}MB) is large for Lambda"
          fi
          
          # Check package contents
          echo "  üìÑ Package contents:"
          unzip -l "$package" | head -20
          echo ""
        done

  integration-tests:
    name: Integration Tests with LocalStack
    runs-on: ubuntu-latest
    needs: build-and-test
    
    services:
      localstack:
        image: localstack/localstack:latest
        ports:
          - 4566:4566
        env:
          SERVICES: s3,dynamodb,lambda,sqs,eventbridge
          DEBUG: 1
        options: >-
          --health-cmd="curl -f http://localhost:4566/_localstack/health"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET 9
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION_9 }}

    - name: Setup .NET 8
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION_8 }}

    - name: Add GitHub NuGet source
      run: |
        dotnet nuget add source https://nuget.pkg.github.com/Third-Opinion/index.json \
          --name github \
          --username ${{ github.actor }} \
          --password ${{ secrets.GITHUB_TOKEN }} \
          --store-password-in-clear-text

    - name: Download Lambda packages
      uses: actions/download-artifact@v4
      with:
        name: lambda-packages
        path: ./artifacts

    - name: Wait for LocalStack
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:4566/_localstack/health; do sleep 2; done'

    - name: Setup test environment
      env:
        AWS_ACCESS_KEY_ID: test
        AWS_SECRET_ACCESS_KEY: test
        AWS_DEFAULT_REGION: us-east-1
        AWS_ENDPOINT_URL: http://localhost:4566
      run: |
        # Create S3 buckets for testing
        aws --endpoint-url=http://localhost:4566 s3 mb s3://fhir-rag-test-bucket || true
        
        # Create DynamoDB tables for testing
        aws --endpoint-url=http://localhost:4566 dynamodb create-table \
          --table-name fhir-rag-test-table \
          --attribute-definitions AttributeName=PK,AttributeType=S AttributeName=SK,AttributeType=S \
          --key-schema AttributeName=PK,KeyType=HASH AttributeName=SK,KeyType=RANGE \
          --billing-mode PAY_PER_REQUEST || true

    - name: Run integration tests
      env:
        AWS_ACCESS_KEY_ID: test
        AWS_SECRET_ACCESS_KEY: test
        AWS_DEFAULT_REGION: us-east-1
        AWS_ENDPOINT_URL: http://localhost:4566
      run: |
        # Run integration tests
        dotnet test ${{ env.SOLUTION_PATH }} \
          --configuration Release \
          --filter "Category=Integration" \
          --verbosity normal || echo "No integration tests found"

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET 9
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION_9 }}

    - name: Setup .NET 8
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION_8 }}

    - name: Add GitHub NuGet source
      run: |
        dotnet nuget add source https://nuget.pkg.github.com/Third-Opinion/index.json \
          --name github \
          --username ${{ github.actor }} \
          --password ${{ secrets.GITHUB_TOKEN }} \
          --store-password-in-clear-text

    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}

    - name: Check code formatting
      run: |
        dotnet format --verify-no-changes --severity error ${{ env.SOLUTION_PATH }} || {
          echo "‚ùå Code formatting issues found. Please run 'dotnet format' to fix."
          exit 1
        }

    - name: Run static analysis
      run: |
        dotnet build ${{ env.SOLUTION_PATH }} \
          --configuration Release \
          -p:TreatWarningsAsErrors=true \
          -p:WarningsAsErrors= \
          -p:RunAnalyzersDuringBuild=true